Forms: The main way you collect information from users. Forms are the gateway for users into your backend services.
    Think amazon! Delivery forms, payment forms etc.


The form element: a container element, wraps all of the inputs a user will interact with on a form.

A form element takes two essential attributes, action and method.
    action: takes a URL value t hat tells the form where it should send its data to be processed.
        This will be revisted later in the curriculum on how to interact with this element from a backend perspective.
    method: tells the browser which HTTP request method it should use to submit the form. The "GET" and "POST" request methods are the two most common.
        GET: gets information from the server, like search results!
        POST: Makes changes to the server, like when a user makes an account.

form example code:
    <form action="example.com/path" method="post">

    </form>

Form controls: These are the elements needed to make the form inputs that users will interact with, like buttons, checkboxes, and buttons.
    input: The most versatile form control elemlent. Accepts a "type" attribute which tells the browser what type of data it should expect 
        and how it shoudl render the input element.

        example code:
        <form action="example.com/path" method="post">
         <input type="text">
        </form>

    text inputs accept any text input(strings)


    Labels: Allows the developer to tell the user what kind of data they are supposed to be inputting.
        example code:
        <form action="example.com/path" method="post">
            <label for="first_name">First Name:</label>
            <input type="text" id="first_name">
        </form>

    Placeholder attribute: Gives user example of an input to guide them in formatting their answers.

    name attribute: Just like labels, but instead informs the backend what the data is for. 
        IF THIS IS NOT INCLUDED THE BACK END WILL IGNORE THIS INFORMATION
            note* You can use this element even if you're not sending it to a backend, can just use it for collecting information showed somewhere else on the page.

    type attribute:
    Email inputs are specialized text inputs just for email addresses.
    example code:
        <label for="user_email">Email Address:</label>
        <input type="email" id="user_email" name="email" placeholder="you@example.com">

    Password inputs:
        Generated using an input element with a type of "password".
    
    number input: only accepts numbesr and ignores other characters.
    date input: renders a simple calendar for user to choose dates (cool)
    text-area: not technically an input element, but creates a large resizeable textbot that accepts user input   
        use cases: user comments and reviews.
    

    Selection elements: Allows users to select a value fomr a predefined list.
        Select Dropdown: Renders a dropdown list where users can select an option. 
            All options on the dropdown NEED a value attribute, this value will be sent to the server when the form is submitted.
            can use <optgroup> to create a label that is applied for the entire group.


    Radio Buttons: Used to allow users to choose from multiple options when there aren't enough options to make a dropdown list necessary.
        All options on the radio buttons must have the same name attribute
        can set a default radio button by adding the checked attribute.

    Checkboxes: The exact same as radio buttons except they allow users to select multiple options simultaneously


Buttons
    clickable elements that users can interact with (they're buttons man)
    <button>Click me!<button>

    submit buttons. <button type ="submit">Submit</button>
        submits forms
    
    reset button
        clears all data from users, returns form to initial value (usually clear)
    
    generic button.
        the regular generic button I've been using so far, can be bound to any javascript method.



Form elements:
    Ways to organize forms os that user's don't get confused or discouraged.

    Fieldset element.
        container element that allows us to group related form inputs into one logical unit.
            e.g. "personal information" section at top of form.

    Legend
        Give field sets a heading or caption.

Form Validation: Validations allow us to set specific constraints or rules that determine what data users can enter into an input.
    This protects backend systems from receiving incorrect data, and they help make the experience of interacting with our form as dead-stupid-simple as possible for users.

    Required Validation:
        by adding the "required" attribute, we make some data required before the form can be submitted.
        The required fields should be obvious to users at a first glance, usually denoted with an asterik *

    text length validations: Forces user to add minimum or maximum amount of text to a field, like the character limit on tweets, or length constraits on usernames.
        minimum length validations:
            Add the "minlength" attribute along with an integer value to represent the minimum amount of characters allowed.
        Maximum length validation:
            Add the "maxlength" attribute along with an integer value.
        These validations are not mututally exclusive, and multiple can be applied for a single data entry.
        
    Number range validations:
        Can control the range of values used   
            use cases: limiting quantity on a product order form, or choosing the number of passengers on a flight booking form.
    Pattern validations:
           To ensure we get the correct information from users we will want to ensure data matches a particular pattern.
                use cases: checking if the inputted data matches a credit card format, or a zipcode, address, etc
            This uses regular expressions.
            Its good practice to use a placeholder attribute to show users an example of the expected pattern they need to enter.
            The pattern attribute can only be used on <input> elements. Some elements, such as email, will do this automatically without manulaly being set.
    Styling validations:
        We can target form controls that have passed or failed validations used the :valid and :invalid pseudo-classes.
            Can be used to make a form turn red with invalid user input, etc.

    Conclusion: Built in validations will take you far, and are quick and easy to use, but still have their limitations.
        For instance, custom validations are required for passwords matching, or if a potential username has already been taken.
        In addition, its CRUCIAL to note that client side validations are not guarantee of valid user input, and they should be paired with server side validations.


    