Default Styles and Resets:
Browser each their own unique minimal styling that is applied to any HTML. For example, links in chrome are blue if no css is appliied!
These default styles are relatively small but CAN create small problems, interefering with your CSS.
To counter this, web developers often use a "reset" to cancel out the browser's default styles and start with a truly neutral HTML, allowing for websites to
perform more consistently across different browsers.
This isn't always used, since the default styling is usually there for good reason, and the programmer will have to manually recreate
a lot of the default styling later anyways.
There are various reset methods with different degrees of changes, but the Meyers reset is by far the most common method.




CSS Units: These units describe the actual size of CSS styles. For instance, pixels
Absolute Units: Pixels (px). There are technically other absolute units such as inches and centimeters, but they don't really make sense in the context of webpages
and you should really only use pixels.

Relative Units: Units that change their size depending on the context
    em and rem: both refer to a font-size, as a rule of thumb prefer rem.
        1 em is the font-size of an eleemnt (or parent element) If the element's parent is 16px, then setting the width to 4em would make the child 64px wide.
        1 rem is the font-size of the root element. The math works the exact same with em's, but without the added complexity of factoring in the parent's font-size

    viewport units: vh and vw relate to the size o the viewport, meaning it scales with the size of the device.
    1vh is equal to 1% of the viewport height and 1vw is equal to 1% of the viewport width.

More Text Styles:
    custom fonts/text-related CSS properties.
    system font stack: If the first font is not available within a browser for whatever reason,  the second specified font will be used instead. If there is no specified
    font, the browser will use the HTML default, which is quite ugly.

    example code: 
    body {
    font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    }
        *The point of this long string of font names is to account for the base font of every reguarly used Browser. This typically ensures a decent looking font
        for the user.

    There are font libraries that you can download non-native fonts from, including Google Fonts, and Font Library.
    example code:
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">


    alternative @import tag method:
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
    
    It is also possible to use fonts downloaded to your computer.


Text-Styles:
    font-style: typically used to make a font iatlic. Use if you just want the italic effect, but without semantic emphasis. If you want semantic emphasis, use the <em>
    html tag.
    letter-spacing: changes space between letters
    line-height: changes the space between each row of text
    text-transform: Changes the case of a given text. Basically all-caps
    text-shadow: Adds shadows to letters. Rarely used but can be great for headings and presentational texts.
    elilipsis: can truncate overflowing text with an ellipsis. TBH I don't know what the means look it up soon.




More CSS Properties: All the CSS properties I'll be using on a regular basis.
    Background: Shorthand for 8 differnt background-related properties.
        Can change background colors, images, image placement, can have multiple background layers.
        Incredibly complicated formal syntax for some reason   
            *should watch a video on this I don't think the documentation is going to cut it.
    border:Shorthand for the border property of elements. Can define size, style, color.
    border-radius: Rounds corners of elements. Possible to do different radiuses for different corners but rarely ever useful, just remember its possible
    box-shadow: Creates a shadow adding a 3d effect for your page. Its best used sparingly and with a light hand.
    overflow: defines what happens when an element is larger than the page.
    Opacity: controls the transparency of an element.

Advanced Selectors: Particularly useful when you can't (or aren't allowed to) modify your HTML. 
    This is not an extensive list, there are MANY advanced selectors.

    Child and sibling combinators: Used to refer to elements without a referring to their classes.
    >: THe child combinator
    +:The adjacent sibling combinator
    ~: The general sibling combinator

        <main class="parent">
            <div class="child group1">
                <div class="grand-child group1"></div>
             </div>
         <div class="child group2">
            <div class="grand-child group2"></div>
        </div>
        <div class="child group3">
            <div class="grand-child group3"></div>
         </div>
    </main>

    using .class in CSS would target the parent and ALL children and grandchildren classes.
    parent > div {
        #this selector targets ONLY the child classes of the parent div. Does NOT target grandchildren.
    }

    parent > div > div
        This selector only targets the grandchildren of the parent div

    .group1 + div {
        #this only selects the div with the class child group2
    }
    .group1 + div + div{
        #this rule will only select the div with the class child group 3
    }
    .group1 ~ div{
        #selects all of group 1's siblings
    }



Pseudo-selectors: 
    *pseudo elements and pseudo classes are NOT the same thing.

    Dynamic and user action pseudo classes:
    a way to target elements in HTML. There are a large variety, and each hold the same specificity as CSS classes.
    :focus applies to an element that is currently selected by the user either through cursor or keyboard
    :hover will affect anything under the user's mouse pointer. It can be used to give extra oomph to buttons and links to
    highlight that they are interactable, or to trigger a drop down menu.
    :active applies to eleemnts that are currently being clicked, especially useful fo rgiving your user feedback that their action hand
    an effect.
    :link and ; visited pseudo-classes are responsible for links turning purple after being visited.

      /* This rule will apply to all links */
  a {
    text-decoration: underline;
  }

  /* This will apply to unvisited links */
  a:link {
    color: blue;
  }

  /* And you guessed it, this applies to all links the user has clicked on */
  a:visited {
    color: purple;
  }


    structural pseudo-classes:
        :root special class that represents the very top level of your document. The one element that has no parents.
        :first-child and :last-child will match elements that are the first and last sibling.
        :empty will match elements that have no children at all.
        :only-child will match elements that don't have siblings.
        :nth-child. This is a flexible pseudo class with a few different uses.

        .myList:nth-child(5) {/* Selects the 5th element with class myList */}

        .myList:nth-child(3n) { /* Selects every 3rd element with class myList */}

        .myList:nth-child(3n + 3) { /* Selects every 3rd element with class myList, beginning with the 3rd */}

        .myList:nth-child(even) {/* Selects every even element with class myList */}


    pseudo-elements: allows us to affect parts of our HTML that aren't elemnts at all. 
        ::marker allows you to customize the styling of your <li> elements bullets or numbers.
        ::First-letter and ::first-line allow you to give special styling to first letter or line of some text.
        ::selection allows you to change the highlighting when a user selects text on the page.
        ::before and ::after allow us to add extra elements onto the page with CSS, instead of HTML. 
            Using it to decorate text in various ways is one common use case.

        <style>
        .emojify::before {
            content: 'ðŸ˜Ž ðŸ¥¸ ðŸ¤“';
        }

        .emojify::after {
            content: 'ðŸ¤“ ðŸ¥¸ ðŸ˜Ž';
        }
        </style>

        <body>
        <div> Let's <span class="emojify">emojify</span>this span!</div>
        </body>


    Attribute Selectors:
        an attribute is simply anything in the opening tag of an HTML element. such as src = "picture.jpg" or href-"www.theodingproject.com"
        [attribute]: a general selector that will select anything where the given attribute is present. Its value doesn't matter.
        selector[attribute]: optionally we can combine our attribute selectors with other types of selectors, such as class or element selectors.
        [attribute = "value]: to get really specific, we can use = to match a specific attribute with a specific value.

        Example code:
            [src] {
                /* This will target any element that has a src attribute. */
            }

            img[src] {
                /* This will only target img elements that have a src attribute. */
            }

            img[src="puppy.jpg"] {
                /* This will target img elements with a src attribute that is exactly "puppy.jpg" */
            }


        you can use selectors that pick general attributes, but specificy what kind of link they want. Uses a similar syntax to regular expressions.
        [attribute^="value"]: ^= will match strings from the start
        [attribute$="value"]: $= will match strings from the end.
        [attribute*="value"]: *= The wildcard selector will match anywhere inside the string.



Positioning
    marging, padding, flexbox, are all part of CSS' default "positioning mode". The default mode will be used for almost all layout needs, but there ARE other methods that can be useful

    position:static is the default I've been using the entire time.
    position:relative is pretty much the same, except that top,left,right,bottom displace the element relative to its normal position in the flow of the document.

    position:absolute allows you to position something in an exact point on the screen WITHOUT disturbing the other elements around it. 
        Use cases: modals, image with a caption on it, icons on top of other elements.
        *absolute positioning has niche use cases, and flexbox/grid should be used instead if possible.
    position:fixed fixed elements are also removed from the normal flow of the document, but are also positioned relative to the viewport.
        use cases: navigation bars and floating chat buttons.

    sticky positioning: sticky elements act like normal elements until you scroll past them, then they start behaving like fixed elements.
        use case: section headings.



CSS functions
    CSS has functions in the same way as every other programming language. Reuseable code that sometimes takes arguments and performs specific tasks.
    Notably, CSS does no support custom functions, only allowing users to use CSS' premade functions.

    common functions:
    calc():
        use case: mixing units, the ability to nest calc(calc()).

        example code:
        :root {
            --header: 3rem;
            --footer: 40px;
            --main: calc(100vh - calc(var(--header) + var(--footer)));
        }
    
*note the min() and max() methods are defined very weirdly and counterintuitively
    min(500px, 50%): checks both input values to find whichever is smallest, then applies that size to the element.
    max(500px, 50%): checks both input values to find whatever is largest, then applies that size to the element.

clamp(smallest value, ideal value, largest value.)
    The clamp function uses these values to set the smallest value, ideal value and largest value. In the above example, this would mean the smallest acceptable font-size would be 320px
    and the largest would be 60 rem. The ideal font-size would be 80 vw.
        This is used to make elements fluid and responsive.

    neat clamp tricks: https://web.dev/articles/min-max-clamp



Custom properties: Basicaly variables but with CSS. Defined with --. Note that custom properties are case sensitive --beepboop!=--BeepBoop
example code:
    .error-modal {
    --color-error-text: red;
    --modal-border: 1px solid black;
    --modal-font-size: calc(2rem + 5vw);

    color: var(--color-error-text);
    border: var(--modal-border);
    font-size: var(--modal-font-size);
    }

    AFter the custom property is defined, it can be accessed using the var() function. The var() function takes two input variables, the variable you want to insert, and a fallback value.
    var(input, fallback);


