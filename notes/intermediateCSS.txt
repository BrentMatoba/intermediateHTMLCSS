Default Styles and Resets:
Browser each their own unique minimal styling that is applied to any HTML. For example, links in chrome are blue if no css is appliied!
These default styles are relatively small but CAN create small problems, interefering with your CSS.
To counter this, web developers often use a "reset" to cancel out the browser's default styles and start with a truly neutral HTML, allowing for websites to
perform more consistently across different browsers.
This isn't always used, since the default styling is usually there for good reason, and the programmer will have to manually recreate
a lot of the default styling later anyways.
There are various reset methods with different degrees of changes, but the Meyers reset is by far the most common method.




CSS Units: These units describe the actual size of CSS styles. For instance, pixels
Absolute Units: Pixels (px). There are technically other absolute units such as inches and centimeters, but they don't really make sense in the context of webpages
and you should really only use pixels.

Relative Units: Units that change their size depending on the context
    em and rem: both refer to a font-size, as a rule of thumb prefer rem.
        1 em is the font-size of an eleemnt (or parent element) If the element's parent is 16px, then setting the width to 4em would make the child 64px wide.
        1 rem is the font-size of the root element. The math works the exact same with em's, but without the added complexity of factoring in the parent's font-size

    viewport units: vh and vw relate to the size o the viewport, meaning it scales with the size of the device.
    1vh is equal to 1% of the viewport height and 1vw is equal to 1% of the viewport width.

More Text Styles:
    custom fonts/text-related CSS properties.
    system font stack: If the first font is not available within a browser for whatever reason,  the second specified font will be used instead. If there is no specified
    font, the browser will use the HTML default, which is quite ugly.

    example code: 
    body {
    font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    }
        *The point of this long string of font names is to account for the base font of every reguarly used Browser. This typically ensures a decent looking font
        for the user.

    There are font libraries that you can download non-native fonts from, including Google Fonts, and Font Library.
    example code:
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">


    alternative @import tag method:
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
    
    It is also possible to use fonts downloaded to your computer.


Text-Styles:
    font-style: typically used to make a font iatlic. Use if you just want the italic effect, but without semantic emphasis. If you want semantic emphasis, use the <em>
    html tag.
    letter-spacing: changes space between letters
    line-height: changes the space between each row of text
    text-transform: Changes the case of a given text. Basically all-caps
    text-shadow: Adds shadows to letters. Rarely used but can be great for headings and presentational texts.
    elilipsis: can truncate overflowing text with an ellipsis. TBH I don't know what the means look it up soon.




More CSS Properties: All the CSS properties I'll be using on a regular basis.
    Background: Shorthand for 8 differnt background-related properties.
        Can change background colors, images, image placement, can have multiple background layers.
        Incredibly complicated formal syntax for some reason   
            *should watch a video on this I don't think the documentation is going to cut it.
    border:Shorthand for the border property of elements. Can define size, style, color.
    border-radius: Rounds corners of elements. Possible to do different radiuses for different corners but rarely ever useful, just remember its possible
    box-shadow: Creates a shadow adding a 3d effect for your page. Its best used sparingly and with a light hand.
    overflow: defines what happens when an element is larger than the page.
    Opacity: controls the transparency of an element.

Advanced Selectors: Particularly useful when you can't (or aren't allowed to) modify your HTML. 
    This is not an extensive list, there are MANY advanced selectors.

    Child and sibling combinators: Used to refer to elements without a referring to their classes.
    >: THe child combinator
    +:The adjacent sibling combinator
    ~: The general sibling combinator

        <main class="parent">
            <div class="child group1">
                <div class="grand-child group1"></div>
             </div>
         <div class="child group2">
            <div class="grand-child group2"></div>
        </div>
        <div class="child group3">
            <div class="grand-child group3"></div>
         </div>
    </main>

    using .class in CSS would target the parent and ALL children and grandchildren classes.
    parent > div {
        #this selector targets ONLY the child classes of the parent div. Does NOT target grandchildren.
    }

    parent > div > div
        This selector only targets the grandchildren of the parent div

    .group1 + div {
        #this only selects the div with the class child group2
    }
    .group1 + div + div{
        #this rule will only select the div with the class child group 3
    }
    .group1 ~ div{
        #selects all of group 1's siblings
    }



Pseudo-selectors: 
    *pseudo elements and pseudo classes are NOT the same thing.

    Pseudo classes:

