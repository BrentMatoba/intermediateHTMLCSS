Introduction:
In this lesson we will examine the different parts of a grid and explore common properties that can be used to position grid items.

Learning goals:
1. Describe the difference between tracks, lines, and cells
2. Position items by defining their start and end lines
3. Use shorthand notaiton

Reviewing tracks: grid-template is used to define the grid itself, the lines are called grid lines, the cells are called grid tracks.

Lines:
Grid lines are made implicitly (automatically) whenever grid tracks are created. We cannot explicitly create grid lines.

Every grid track has a start line and an end line. The lines are numbered from left to right and top to bottom starting at 1.
a 3x3 grid has lines 1-4 horizontally and lines 1-4 vertically

grid LINES are what we u sed to position grid items
There are negative and positive line spaces, don't have to know too much about them yet but should know that they exist


Cells:
Its exactly what you think it is, works just like excel, space in the grid defined by a row, column coordinate

By default, each child element of a grid container will occupy one cell. In the example above, we have 9 cells in our grid (3rows x 3 columns)
each with one automatically positioned child element inside. The element marked with the letter "A" is occupying a cell that lies in row track 1
and column track 1. The item marked with the letter "H" is in a cell at row track 3 adn column track 2.
But what happens if we want to the change the order of our grid items? or if we want items to occupy more than one cell?


Positioning:
grid-column is a combination of grid-colum-start and grid-column-end with a slash between the values.
grid-column:4/6;
grid-row:3/6;

An even SHORTER shorthand is grid-area
grid-area is a combination of grid-row-start, grid-column-start/ grid-row-end/grid-column-end


You can give each room a name like this
#living-room{
    grid-area: living-room;
}

and then map out the rooms like this. This seems really dumb and ineffecient imo but its a thing
.container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
  grid-template-areas:
    "living-room living-room living-room living-room living-room"
    "living-room living-room living-room living-room living-room"
    "bedroom bedroom bathroom kitchen kitchen"
    "bedroom bedroom bathroom kitchen kitchen"
    "closet closet bathroom kitchen kitchen"    
}

. == empty cell
Note: Empty cells means you can have white space without pushing around elements with margins
- can be used to access cells from the end, exactly like an array

Gutters and Alleys:
The column-gap and row-gap properties can be used to specify a gap

span keyword can be used to specify how many rows/columns you would like the item to make up


Properties of the grid container:
display:
grid: generates a block level grid
 inline-grid: generates an inline-level grid

 Properties for the children:
 justify-self: align sa grid item inside a cell along the inline (row) axis (as opposed to align-self which aligns alon gthe block (column) axis). 
 justify-self: start | end | center | stretch;

 align-self: aligns a grid item inside a cell along the block(column axis) as opposed to justify-self which aligns along the inline row axis this value applies to the content inside a single grid item.
 .item{
  align-self: start | end | center | stretch;
 }

 place-self sets both the align-self and justify-self properties in a single declaration
 values:
  auto: The "default" alignment for the layout mode.
  <align-self>/<justify-self>: the first value sets align-self, the second value sets justify-self. if the second
  value is ommitted, the first value is assigned to both properties.
  .item-a{
    place-self: center
  }


  repeat() is a CSS function available to the CSS grid template properties that allows us to define a number
  of rows or columns and the size we want them to be without having to manually type each individual track's size. For example, in our setup
  above:

  .grid-container{
    grid-template-rows: 150px; 150px;
    grid-template-columns: 150px 150px 150px 150px 150px
  }

  can instead be rewritten as
  .grid-container{
    grid-template-rowss: repeat(2, 150px);
    grid-template-columns: repeat(5, 150px);
  }


  Fractional units(fr)
  Dynamic units, meaning they're responsive.
  Using fractional units is the most basic way to make a grid responsive.
  Fractional units distribute whatever REMAINING space is left. For example, if we have a four-column grid with a total width of 400 px and four
  grid items each on a column track assigned 1fr as their size, all of the grid items should be given ONE FRACTION of that 400 px of space, which is 100 px.

  fr units can be used to disproportionately give some units space.

  Fr units can be mixed with static units, like if you want one div to specifically remain at 125 px wide,
  but fractionally distribute everything else.

  be aware of the MINCONTENT keyword in CSS, its not covered in this lesson, but is VERY useful for handling how small elements can go
  as the window shrinks.




  Minimum and maximum track sizees: min() and max()
  both min() and max() will return a value based on the argumetns you supply them. min() will return the smallest of all values passed,
  and max() will return the largest.

  Obviously its troll to feed these arguments static values, since the result will always be the same. These functions become powerful only
  once you start using dynamic values (FOR INSTANCE FRACTIONAL UNITS)
  .grid-container{
    grid-template-rows: repeat(2, min(200px, 50%));
    grid-template-columns: repeat(5, max(120px, 15%));
    //essentially setting a max height for the track.
  }

minmax():
is a CSS function specifically used with Grid. It can only be used with the following CSS properties:
grid-template-columns
grid-template-rows
grid-auto-columns
grid-auto-rows

Its a relatively straightforward function that only takes in two argumetns:
1: The minimum size the grid track can be
2: The maximum size the grid track can be.
Unlike min() and max(), it makes sense to use static values for both arguments.

clamp():
Unlike minmax(), clam() is a CSS funciton that can be used anywhere, not just within
a grid container. As with min() and max(), we learned about it in a previous lesson,
but lets do a quick review. the syntax is as follows:

clamp(minmum-size, ideal-size, maximum-size)
Allows element to resize itself until it reaches one of the minimum or maximum threshold values.