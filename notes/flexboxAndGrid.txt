Introduction:
Grid and flexbox are complementary, don't think of it as one or the other, but rather as two tools that can be used in concert.

Learning outcomes:
1. Know when you might want to use flexbox over Grid
2. Know when you might want to use grid over flexbox.
3. Know when you might want to use the two together.

content first vs layout first design.
A way to decide between grid and flexbox is to consider if your design starts from the content, or from the layout.

In content first design, you begin with clarity of how the content should be, and the layout follows. This is ag reat opportunity to use flexbox. Its flexible nature 
gives you control of behavior of items through logical rules. How they grow, shrink, their ideal size and position in relation to ehac other, all make the layout
dynamic. While flexbox gives you control over its element, the final layout is only a consequence. Depending on the dimensions of the flex container, its general
layout can change a lot.

In layout first design, you decide how you want the pieces to be arranged, then fill in the content. That is when grid shines. Defining grid row and colum tracks gives
you full control of layout. Content in a grid can only fill the spaces of the explicit or implicit tracks. So, when you have an idea of how the big picture of a container
should look like, grid is the clear choice.
*note these are guidelines, and a content/layout first design does not force you to use either technique

Combining flexbox and grid:
If you have one-dimensional content, flexbox can make it easier to control how that content is positioned in a flex container. If, on the other hand, you want to
accurately place content on a complex layout in two dimensions, grid can be simpler to use.

Say you want your overall layout to be a grid, but then you want the grid items to act as flex parents. This way, the grid items can be moed around using the precise
two-dimensional placement grid allows for, while also allowing the content inside the grid items to be capable of freely moving around using flex.

Closing Opinion: This lesson includes reccomendations, not the "right" or "wrong" way of using flexbox or grid. ultimately, it comes down to personal preference
and wht a developer feels is easier for whatever the given task might be. At this point you have both of these tools in your toolbox and got a sneak peek At
how they can be used together or one in place of the other.



When to use flexbox vs grid:
In general, grid can do EVERYTHING flexbox can.
FOR NOW browser support is better for flexbox than grid, but this is expected to change in the near future.
Flexbox is easier to animate changes with

Grids pros:
much more consistent across browsers, less bugs than flexbox.
If designing something with a single axis, its much easier to pivot if you decide to change to a multi row design.

Axis flipping:
    flexbox lets you flip content very easily.

grid-auto-flow is like flex-direction change


justify-items is justify content but for grid THAT WOULD HAVE BEEN NICE TO Know
justify-self is also a thing, I think items if applied to parent, self if applied to child
align items works with grid as well