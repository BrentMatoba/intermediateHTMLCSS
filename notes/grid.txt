CSS GRID:
By the end of this lesson you should be able to:
    compare the basics between Flexbox and Grid.
    Describe a situation for using grid over flexbox.
    Introduced in 2017, grid allows users to place divs in a grid...lol
    Great for easy placement of items in a two-dimensional layout.
    Initially thought to replace flexbox, it instead is another tool in the toolbelt, and
    can sometimes be used in tandem with flexbox for great results.
    gap property is really useful



Grid container:
    Like flexbox, grid uses parent divs to act as containers, with the display:grid property.
    .container{
        display:grid;
    }
    The grid attribute cascades to the IMMEDIATE child elements.
    grid attribute does not cascade down to grandchildren elements.

<div class="container">
  <div>Item 1</div>
  <div>Item 2
    <p>I am not a grid item!</p>
  </div>
  <div>Item 3</div>
  <div>Item 4</div>
</div>

*<p> does NOT get the grid property.

browser devtools can be used to find invisible grid items.

grid track: space between lines on a grid.
grid-template-columns:define columns
grid-template-rows:define rows

.container {
  display: grid;
  grid-template-columns: 50px 50px;
  grid-template-rows: 50px 50px;
}
*Defines two columns, two rows


.container {
  display: grid;
  grid-template: 50px 50px / 50px 50px 50px;
}
*more efficient shorthand


explict vs implicit grid:
If we add elements that are not explicitly defined in the grid we setup, CSS will
autogenerate a grid row to place the items in, called an implicit grid. This
grid does NOT follow the rules and properties defined for the explicit grid, and
must be separatelly manipualated.

Gap: space between each div for rows and columns, often called the "gutter" or the "alley" (really?)
can be manipulated with column-gap and row-gap, or just gap

Reviewing tracks: 
grid-template: used to define the grid tracks.
grid tracks: any single row or column on a grid.
.first/last row or .last-column are useful class selectors

lines
grid lines are created implicity. Grid lines are only created after our grid tracks have been defined.
we cannot explicitly create grid lines.
Every track has a start line and an end line. The lines are numbered from left to right and top to bottom starting at 1.
Grid lines are what we use to position grid items. 


Cells:
The space in a grid shaerd by a single row track and a single column track is called a grid cell.
Think of it like a cell in a spreadsheet

Positioning:
grid-column-start and rid-column-end with a slash between the two values. I believe this alters the size
of a cell to the integers specified.
grid-row does the same but vertically

grid-area 
  positioning shorthand:
  grid-row-start/grid-column-start/grid-row-end/grid-column-end can all be combined into 
  one line using grid-area.
  we can give each cell a grid area attribute with a name, then use those names while arranging the actual grid-template

  .container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
  grid-template-areas:
    "living-room living-room living-room living-room living-room"
    "living-room living-room living-room living-room living-room"
    "bedroom bedroom bathroom kitchen kitchen"
    "bedroom bedroom bathroom kitchen kitchen"
    "closet closet bathroom kitchen kitchen"    
}

very strange.

"." is used to indicate empty Cells

