CSS GRID:
By the end of this lesson you should be able to:
    compare the basics between Flexbox and Grid.
    Describe a situation for using grid over flexbox.
    Introduced in 2017, grid allows users to place divs in a grid...lol
    Great for easy placement of items in a two-dimensional layout.
    Initially thought to replace flexbox, it instead is another tool in the toolbelt, and
    can sometimes be used in tandem with flexbox for great results.
    gap property is really useful



Grid container:
    Like flexbox, grid uses parent divs to act as containers, with the display:grid property.
    .container{
        display:grid;
    }
    The grid attribute cascades to the IMMEDIATE child elements.
    grid attribute does not cascade down to grandchildren elements.

<div class="container">
  <div>Item 1</div>
  <div>Item 2
    <p>I am not a grid item!</p>
  </div>
  <div>Item 3</div>
  <div>Item 4</div>
</div>

*<p> does NOT get the grid property.

browser devtools can be used to find invisible grid items.

grid track: space between lines on a grid.
grid-template-columns:define columns
grid-template-rows:define rows

.container {
  display: grid;
  grid-template-columns: 50px 50px;
  grid-template-rows: 50px 50px;
}
*Defines two columns, two rows


.container {
  display: grid;
  grid-template: 50px 50px / 50px 50px 50px;
}
*more efficient shorthand


explict vs implicit grid:
If we add elements that are not explicitly defined in the grid we setup, CSS will
autogenerate a grid row to place the items in, called an implicit grid. This
grid does NOT follow the rules and properties defined for the explicit grid, and
must be separatelly manipualated.

Gap: space between each div for rows and columns, often called the "gutter" or the "alley" (really?)
can be manipulated with column-gap and row-gap, or just gap